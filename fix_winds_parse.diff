diff --git a/src/decoder.ts b/src/decoder.ts
--- a/src/decoder.ts
+++ b/src/decoder.ts
@@ -59,6 +59,37 @@ let cachedMessages: WeatherMessage[] | null = null;
 const stations: { [key: string]: string } = JSON.parse(fs.readFileSync(path.join(__dirname, '../data/stations.json'), 'utf8'));

 // Конечный автомат
 enum State {
   INITIAL,
   HEADER,
   PART_1,
   PART_2,
   PART_3,
   SYNOPSIS,
   ICE_REPORT,
   FORECAST,
   END,
 }

 interface FSMContext {
   state: State;
   message: WeatherMessage;
   currentForecast?: Forecast;
   currentIceReport?: IceReport;
   currentSynopsis?: Synopsis;
   currentStationCodes?: string[];
 }

+function parseWind(line: string): { direction: string; speed: string; gusts?: string } {
+  const result: { direction: string; speed: string; gusts?: string } = { direction: '', speed: '' };
+  const dirMatch = line.match(/^WINDS\s+([A-Z\s\/]+?)(?=\s+(?:\d|GUSTS))/i);
+  if (!dirMatch) {
+    return result;
+  }
+  result.direction = dirMatch[1].trim();
+  let remainder = line.slice(dirMatch[0].length).trim();
+
+  let match = remainder.match(/^(\d+\s*(?:TO\s*\d+)?\s*MS)\s+GUSTS\s*(\d+\s*(?:TO\s*\d+)?\s*MS)/i);
+  if (match) {
+    result.speed = match[1].trim();
+    result.gusts = match[2].trim();
+    return result;
+  }
+
+  match = remainder.match(/^GUSTS\s*(\d+\s*(?:TO\s*\d+)?\s*MS)/i);
+  if (match) {
+    result.speed = match[1].trim();
+    result.gusts = match[1].trim();
+    return result;
+  }
+
+  match = remainder.match(/^(\d+\s*(?:TO\s*\d+)?\s*MS)/i);
+  if (match) {
+    result.speed = match[1].trim();
+  }
+
+  return result;
+}
+
 // Декодирование сообщения
 function decodeMessage(input: string): WeatherMessage[] {
   if (input === lastInput && cachedMessages) {
     return cachedMessages;
   }

   const messages: WeatherMessage[] = [];
   const lines = input.split(/\r?\n/).map(line => line.trim()).filter(Boolean);
   let context: FSMContext = {
     state: State.INITIAL,
     message: {
       type: 'SafetyNet',
       date: '',
       source: '',
       sections: { header: [], part1: [], part3: [] },
     },
   };

   for (const line of lines) {
     const upperLine = line.toUpperCase();
     if (upperLine.startsWith('ZCZC')) {
       if (context.message.sections.header.length || context.message.sections.part1.length || context.message.sections.part2 || context.message.sections.part3.length) {
         messages.push(context.message);
       }
       context = {
         state: State.HEADER,
         message: {
           type: 'SafetyNet',
           date: '',
           source: '',
           sections: { header: [line], part1: [], part3: [] },
         },
       };
       continue;
     }
     processLine(line, context);
   }
@@ -124,6 +155,7 @@ function decodeMessage(input: string): WeatherMessage[] {
   lastInput = input;
   cachedMessages = [...messages];
   return messages;
 }

 // Обработка строки конечным автоматом
 function processLine(line: string, context: FSMContext): void {
   const upperLine = line.toUpperCase();

   switch (context.state) {
     case State.INITIAL:
       break;

     case State.HEADER:
       if (upperLine.includes('GALE WARNING')) {
         context.state = State.PART_1;
         context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
       } else if (upperLine.includes('SYNOPSIS')) {
         context.state = State.SYNOPSIS;
         context.message.sections.part2 = { synopsis: { time: line.replace(/^SYNOPSIS AT\s+/, ''), pressures: [] } };
       } else if (upperLine.includes('FORECAST') && context.message.sections.part1.length === 0) {
         context.state = State.PART_3;
         context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
       } else if (upperLine.includes('WINDS')) {
         context.state = State.PART_1;
         context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: parseWind(line) };
       } else if (upperLine.includes('SECOND HALF NIGHT')) {
         context.state = State.PART_1;
         context.currentForecast = { stationCodes: [], timeRange: { from: line.trim(), to: '' }, wind: { direction: '', speed: '' } };
       } else if (upperLine === 'NNNN') {
         context.state = State.INITIAL;
       } else if (/^\d{6}\s+UTC\s+[A-Z]{3}\s+\d{2}$/.test(upperLine)) {
         context.message.date = line;
         context.message.sections.header.push(line);
       } else {
         context.message.sections.header.push(line);
         if (upperLine.includes('ISSUED BY')) {
           context.message.source = line.replace(/^ISSUED\s+BY\s*/i, '');
         }
       }
       break;

     case State.PART_1:
       if (upperLine.includes('SYNOPSIS') || upperLine.includes('PART 2')) {
         if (context.currentForecast && (context.currentForecast.wind.speed || context.currentForecast.timeRange.from || context.currentForecast.seas)) {
           context.message.sections.part1.push(context.currentForecast);
           context.currentForecast = undefined;
         }
         context.state = State.SYNOPSIS;
         context.message.sections.part2 = { synopsis: { time: line.replace(/^SYNOPSIS AT\s+/, ''), pressures: [] } };
       } else if (upperLine.includes('GALE WARNING')) {
         if (context.currentForecast && (context.currentForecast.wind.speed || context.currentForecast.timeRange.from || context.currentForecast.seas)) {
           context.message.sections.part1.push(context.currentForecast);
         }
         context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: i18n.__('gale_warning'), speed: '' } };
       } else if (/^\d{5}(,\s*\d{5})*/.test(line)) {
         context.currentStationCodes = line.split(',').map(code => code.trim());
         if (context.currentForecast) {
           context.currentForecast.stationCodes = context.currentStationCodes;
         } else {
           context.currentForecast = { stationCodes: context.currentStationCodes, timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
       } else if (upperLine.startsWith('FROM') || (upperLine.includes('SECOND HALF NIGHT') && !upperLine.includes('GUSTS'))) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         let from = line.trim();
         let to = '';
         if (upperLine.startsWith('FROM')) {
           const timeMatch = line.match(/^FROM\s+(.+?)\s+TO\s+(.+)/i);
           if (timeMatch) {
             from = timeMatch[1].trim();
             to = timeMatch[2].trim();
           }
         } else {
           from = line.trim();
         }
         context.currentForecast.timeRange = { from, to };
       } else if (/SECOND HALF NIGHT|FIRST HALF DAY/i.test(upperLine)) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.timeRange = { from: line.trim(), to: '' };
       } else if (upperLine.includes('WINDS')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.wind = parseWind(line);
       } else if (upperLine.includes('HEIGHT OF WAVES')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.seas = line.replace(/^HEIGHT OF WAVES\s+/, '');
       } else if (upperLine.includes('TEMP')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.temperature = line.replace(/^TEMPERATURE OF\s+(?:AIR\s+)?/, '');
       } else if (upperLine.includes('VIS')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.visibility = line.replace(/^VIS\s+/, '');
       } else if (upperLine.includes('ICE ACCRETION')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.iceAccretion = line.replace(/^ICE ACCRETION\s+/, '');
       } else if (upperLine === 'NNNN') {
         if (context.currentForecast && (context.currentForecast.wind.speed || context.currentForecast.timeRange.from || context.currentForecast.seas)) {
           context.message.sections.part1.push(context.currentForecast);
           context.currentForecast = undefined;
         }
         context.state = State.INITIAL;
       } else if (upperLine.includes('PETER THE GREAT GULF') || upperLine.includes('REGION')) {
         if (context.currentForecast) {
           const hasOtherData = context.currentForecast.wind.speed || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility;
           if (!hasOtherData && context.currentForecast.timeRange.from && !context.currentForecast.region) {
             context.currentForecast.region = line;
           } else {
             if (context.currentForecast.wind.speed || context.currentForecast.timeRange.from || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility) {
               context.message.sections.part1.push(context.currentForecast);
             }
             context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' }, region: line };
           }
         } else {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' }, region: line };
         }
       }
       break;

     case State.PART_2:
       if (upperLine.includes('SYNOPSIS')) {
         context.state = State.SYNOPSIS;
         context.currentSynopsis = { time: line.replace(/^SYNOPSIS AT\s+/, ''), pressures: [] };
       } else if (upperLine.includes('ICE')) {
         context.state = State.ICE_REPORT;
         context.currentIceReport = { region: '', direction: '', coordinates: [] };
       } else if (upperLine.includes('FORECAST') || upperLine.includes('PART 3')) {
         context.state = State.PART_3;
         context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
       } else if (upperLine === 'NNNN') {
         context.state = State.INITIAL;
       } else {
         context.message.sections.part2 = context.message.sections.part2 || { synopsis: { time: '', pressures: [] } };
         context.message.sections.part2.synopsis!.pressures.push({
           type: upperLine.includes('LOW') ? 'LOW' : upperLine.includes('HIGH') ? 'HIGH' : 'INFO',
           hpa: '',
           position: line,
           movement: upperLine.includes('MOVING') ? line.match(/MOVING\s+(.+)/i)?.[1] : undefined,
         });
       }
       break;

     case State.SYNOPSIS:
       if (upperLine.includes('FORECAST') || upperLine.includes('PART 3')) {
         context.state = State.PART_3;
         context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
       } else if (upperLine.includes('ICE')) {
         context.message.sections.part2 = context.message.sections.part2 || { synopsis: { time: '', pressures: [] } };
         context.message.sections.part2.synopsis = context.currentSynopsis;
         context.currentSynopsis = undefined;
         context.state = State.ICE_REPORT;
         context.currentIceReport = { region: '', direction: '', coordinates: [] };
       } else if (upperLine === 'NNNN') {
         context.state = State.INITIAL;
       } else {
         context.message.sections.part2 = context.message.sections.part2 || { synopsis: { time: '', pressures: [] } };
         context.message.sections.part2.synopsis!.pressures.push({
           type: upperLine.includes('LOW') ? 'LOW' : upperLine.includes('HIGH') ? 'HIGH' : 'INFO',
           hpa: '',
           position: line,
           movement: upperLine.includes('MOVING') ? line.match(/MOVING\s+(.+)/i)?.[1] : undefined,
         });
       }
       break;

     case State.ICE_REPORT:
       if (upperLine.includes('PART 3') || upperLine.includes('FORECAST')) {
         context.message.sections.part2 = context.message.sections.part2 || { synopsis: { time: '', pressures: [] }, iceReports: [] };
         context.message.sections.part2.iceReports!.push(context.currentIceReport!);
         context.currentIceReport = undefined;
         context.state = State.PART_3;
         context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
       } else if (upperLine.match(/^[A-Z0-9-]+$/)) {
         context.currentIceReport!.region = line;
       } else if (upperLine.includes('ICE N') || upperLine.includes('ICE S') || upperLine.includes('ICE E') || upperLine.includes('ICE SW')) {
         context.currentIceReport!.direction = line.match(/ICE\s+([A-Z\/]+)/i)![1];
         context.currentIceReport!.coordinates.push(line.replace(/ICE\s+[A-Z\/]+\s+TO\s+/, ''));
       } else if (upperLine.includes('WINDS')) {
         context.message.sections.part2 = context.message.sections.part2 || { synopsis: { time: '', pressures: [] }, iceReports: [] };
         context.message.sections.part2.iceReports!.push(context.currentIceReport!);
         context.currentIceReport = undefined;
         context.state = State.FORECAST;
         context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: parseWind(line) };
       } else if (upperLine === 'NNNN') {
         context.state = State.INITIAL;
       }
       break;

     case State.PART_3:
       if (/^\d{5}(,\s*\d{5})*/.test(line)) {
         context.currentStationCodes = line.split(',').map(code => code.trim());
         if (context.currentForecast) {
           context.currentForecast.stationCodes = context.currentStationCodes;
         } else {
           context.currentForecast = { stationCodes: context.currentStationCodes, timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
       } else if (upperLine.includes('WINDS')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.wind = parseWind(line);
       } else if (upperLine.includes('HEIGHT OF WAVES')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.seas = line.replace(/^HEIGHT OF WAVES\s+/, '');
       } else if (upperLine.includes('TEMP')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.temperature = line.replace(/^TEMPERATURE OF\s+(?:AIR\s+)?/, '');
       } else if (upperLine.includes('VIS')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.visibility = line.replace(/^VIS\s+/, '');
       } else if (upperLine.includes('ICE ACCRETION')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.iceAccretion = line.replace(/^ICE ACCRETION\s+/, '');
       } else if (upperLine === 'NNNN') {
         if (context.currentForecast && (context.currentForecast.wind.speed || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility || context.currentForecast.timeRange.from)) {
           if (context.message.sections.part3) {
             context.message.sections.part3.push(context.currentForecast);
           } else {
             context.message.sections.part1.push(context.currentForecast);
           }
           context.currentForecast = undefined;
           context.currentStationCodes = undefined;
         }
         context.state = State.INITIAL;
       } else if (upperLine.startsWith('FROM') || (upperLine.includes('SECOND HALF NIGHT') && !upperLine.includes('GUSTS'))) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         let from = line.trim();
         let to = '';
         if (upperLine.startsWith('FROM')) {
           const timeMatch = line.match(/^FROM\s+(.+?)\s+TO\s+(.+)/i);
           if (timeMatch) {
             from = timeMatch[1].trim();
             to = timeMatch[2].trim();
           }
         } else {
           from = line.trim();
         }
         context.currentForecast.timeRange = { from, to };
       } else if (/SECOND HALF NIGHT|FIRST HALF DAY/i.test(upperLine)) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.timeRange = { from: line.trim(), to: '' };
       } else if (upperLine.includes('PETER THE GREAT GULF') || upperLine.includes('REGION')) {
         if (context.currentForecast) {
           const hasOtherData = context.currentForecast.wind.speed || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility;
           if (!hasOtherData && context.currentForecast.timeRange.from && !context.currentForecast.region) {
             context.currentForecast.region = line;
           } else {
             if (context.currentForecast.wind.speed || context.currentForecast.timeRange.from || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility) {
               if (context.message.sections.part3) {
                 context.message.sections.part3.push(context.currentForecast);
               } else {
                 context.message.sections.part1.push(context.currentForecast);
               }
             }
             context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' }, region: line };
           }
         } else {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' }, region: line };
         }
       }
       break;

     case State.FORECAST:
       if (upperLine.includes('WINDS')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.wind = parseWind(line);
       } else if (upperLine.includes('TEMP')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.temperature = line.replace(/^TEMPERATURE OF\s+(?:AIR\s+)?/, '');
       } else if (upperLine.includes('VIS')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.visibility = line.replace(/^VIS\s+/, '');
       } else if (upperLine.includes('HEIGHT OF WAVES')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.seas = line.replace(/^HEIGHT OF WAVES\s+/, '');
       } else if (upperLine.includes('ICE ACCRETION')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.iceAccretion = line.replace(/^ICE ACCRETION\s+/, '');
       } else if (/^\d{5}(,\s*\d{5})*/.test(line) || upperLine === 'NNNN') {
         if (context.currentForecast && (context.currentForecast.wind.speed || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility || context.currentForecast.timeRange.from)) {
           if (context.message.sections.part3) {
             context.message.sections.part3.push(context.currentForecast);
           } else {
             context.message.sections.part1.push(context.currentForecast);
           }
           context.currentForecast = undefined;
           context.currentStationCodes = undefined;
         }
         if (upperLine === 'NNNN') {
           context.state = State.INITIAL;
         } else {
           context.currentStationCodes = line.split(',').map(code => code.trim());
           context.currentForecast = { stationCodes: context.currentStationCodes, timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
       } else if (upperLine.includes('PETER THE GREAT GULF') || upperLine.includes('REGION')) {
         if (context.currentForecast && (context.currentForecast.wind.speed || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility || context.currentForecast.timeRange.from)) {
           if (context.message.sections.part3) {
             context.message.sections.part3.push(context.currentForecast);
           } else {
             context.message.sections.part1.push(context.currentForecast);
           }
         }
         context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' }, region: line };
       }
       break;

     case State.END:
       if (upperLine.startsWith('ZCZC')) {
         context.state = State.HEADER;
         context.message.sections.header = [line];
       }
       break;
   }
 }
```

1. Сохранить патч в файл "C:\Projects\GidroMeteo_New\fix_winds_parse.diff".
2. Выполнить:
   ```bash
   cd C:\Projects\GidroMeteo_New
   git apply fix_winds_parse.diff
   ```

### Сохранение в репозиторий:
```bash
cd C:\Projects\GidroMeteo_New
git add src/main.ts src/decoder.ts
tools\push_to_github.bat "Fixed main.ts syntax and added parseWind in decoder.ts (552 lines)"
tools\update_tag_v09.bat
```

### Тестирование:
```bash
cd C:\Projects\GidroMeteo_New
rmdir /s /q dist
npm run build
npm test
cd dist
node main.js ../data/input.txt
```

### Отладочные шаги:
1. Добавить логи в `decoder.ts` в функцию `parseWind`:
   ```typescript
   console.log(`Parsing wind: ${line}, result: ${JSON.stringify(result)}`);
   ```
2. Включить Jest watch mode:
   ```bash
   npm test -- --watch
   ```
3. Проверить `ru.json` на наличие ключей `error_no_input`, `error_read_file`, `success_output_written`.

Предоставьте:
- Полный актуальный `main.ts` (для проверки синтаксиса).
- Логи `npm run build` и `npm test`.
- `output.txt` (если создан, с 21-й строки).