 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/src/decoder.ts b/src/decoder.ts
index c5affa4072ba466120accae5d6ca68ceaab74006..815bfcaab7866f4aadfd2e33b858f06cb01cfb28 100644
--- a/src/decoder.ts
+++ b/src/decoder.ts
@@ -126,150 +126,164 @@ function decodeMessage(input: string): WeatherMessage[] {
   lastInput = input;
   cachedMessages = [...messages];
   return messages;
 }
 
 // Обработка строки конечным автоматом
 function processLine(line: string, context: FSMContext): void {
   const upperLine = line.toUpperCase();
 
   switch (context.state) {
     case State.INITIAL:
       break;
 
     case State.HEADER:
       if (upperLine.includes('GALE WARNING')) {
         context.state = State.PART_1;
         context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
       } else if (upperLine.includes('SYNOPSIS')) {
         context.state = State.SYNOPSIS;
         context.message.sections.part2 = { synopsis: { time: line.replace(/^SYNOPSIS AT\s+/, ''), pressures: [] } };
       } else if (upperLine.includes('FORECAST') && context.message.sections.part1.length === 0) {
         context.state = State.PART_3;
         context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
       } else if (upperLine.includes('WINDS') || upperLine.includes('SECOND HALF NIGHT')) {
         context.state = State.PART_1;
-        context.currentForecast = { stationCodes: [], timeRange: { from: line.trim(), to: '' }, wind: { direction: '', speed: '' } };
+        context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
+        if (upperLine.includes('WINDS')) {
+          const windMatch = line.match(/WINDS\s+((?:[A-Z]{1,2}\s+)*[A-Z]{1,2})(?=\s+(?:\d|GUSTS|$))(?:\s+(\d+\s*(?:TO\s*\d+)?\s*MS))?(?:\s+GUSTS\s*(\d+\s*(?:TO\s*\d+)?\s*MS))?/i);
+          if (windMatch) {
+            const speed = windMatch[2] || windMatch[3] || '';
+            context.currentForecast.wind = {
+              direction: windMatch[1].trim(),
+              speed,
+              gusts: windMatch[3] || undefined,
+            };
+          }
+        } else {
+          context.currentForecast.timeRange = { from: line.trim(), to: '' };
+        }
       } else if (upperLine === 'NNNN') {
         context.state = State.INITIAL;
       } else if (/^\d{6}\s+UTC\s+[A-Z]{3}\s+\d{2}$/.test(upperLine)) {
         context.message.date = line;
         context.message.sections.header.push(line);
       } else {
         context.message.sections.header.push(line);
         if (upperLine.includes('ISSUED BY')) {
           context.message.source = line.replace(/^ISSUED\s+BY\s*/i, '');
         }
       }
       break;
 
     case State.PART_1:
       if (upperLine.includes('SYNOPSIS') || upperLine.includes('PART 2')) {
-        if (context.currentForecast && (context.currentForecast.wind.speed || context.currentForecast.timeRange.from || context.currentForecast.seas)) {
+        if (context.currentForecast && (context.currentForecast.wind.speed || context.currentForecast.wind.gusts || context.currentForecast.timeRange.from || context.currentForecast.seas)) {
           context.message.sections.part1.push(context.currentForecast);
           context.currentForecast = undefined;
         }
         context.state = State.SYNOPSIS;
         context.message.sections.part2 = { synopsis: { time: line.replace(/^SYNOPSIS AT\s+/, ''), pressures: [] } };
       } else if (upperLine.includes('GALE WARNING')) {
-        if (context.currentForecast && (context.currentForecast.wind.speed || context.currentForecast.timeRange.from || context.currentForecast.seas)) {
+        if (context.currentForecast && (context.currentForecast.wind.speed || context.currentForecast.wind.gusts || context.currentForecast.timeRange.from || context.currentForecast.seas)) {
           context.message.sections.part1.push(context.currentForecast);
         }
         context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: i18n.__('gale_warning'), speed: '' } };
       } else if (/^\d{5}(,\s*\d{5})*/.test(line)) {
         context.currentStationCodes = line.split(',').map(code => code.trim());
         if (context.currentForecast) {
           context.currentForecast.stationCodes = context.currentStationCodes;
         } else {
           context.currentForecast = { stationCodes: context.currentStationCodes, timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
       } else if (upperLine.startsWith('FROM') || (upperLine.includes('SECOND HALF NIGHT') && !upperLine.includes('GUSTS'))) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         let from = line.trim();
         let to = '';
         if (upperLine.startsWith('FROM')) {
           const timeMatch = line.match(/^FROM\s+(.+?)\s+TO\s+(.+)/i);
           if (timeMatch) {
             from = timeMatch[1].trim();
             to = timeMatch[2].trim();
           }
         } else {
           from = line.trim();
         }
         context.currentForecast.timeRange = { from, to };
       } else if (/SECOND HALF NIGHT|FIRST HALF DAY/i.test(upperLine)) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.timeRange = { from: line.trim(), to: '' };
       } else if (upperLine.includes('WINDS')) {
-        const windMatch = line.match(/WINDS\s+([A-Z\s\/]+?)(?:\s+(\d+\s*(?:TO\s*\d+)?\s*MS))?(?:\s+GUSTS\s*(\d+\s*(?:TO\s*\d+)?\s*MS))?/i);
-        if (windMatch) {
-          if (!context.currentForecast) {
-            context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
-          }
-          context.currentForecast.wind = {
-            direction: windMatch[1].trim(),
-            speed: windMatch[2] || '',
-            gusts: windMatch[3] || undefined,
-          };
+        const windMatch = line.match(/WINDS\s+((?:[A-Z]{1,2}\s+)*[A-Z]{1,2})(?=\s+(?:\d|GUSTS|$))(?:\s+(\d+\s*(?:TO\s*\d+)?\s*MS))?(?:\s+GUSTS\s*(\d+\s*(?:TO\s*\d+)?\s*MS))?/i);
+          if (windMatch) {
+            if (!context.currentForecast) {
+              context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
+            }
+            const speed = windMatch[2] || windMatch[3] || '';
+            context.currentForecast.wind = {
+              direction: windMatch[1].trim(),
+              speed,
+              gusts: windMatch[3] || undefined,
+            };
         }
       } else if (upperLine.includes('HEIGHT OF WAVES')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.seas = line.replace(/^HEIGHT OF WAVES\s+/, '');
       } else if (upperLine.includes('TEMP')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.temperature = line.replace(/^TEMPERATURE OF\s+(?:AIR\s+)?/, '');
       } else if (upperLine.includes('VIS')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.visibility = line.replace(/^VIS\s+/, '');
       } else if (upperLine.includes('ICE ACCRETION')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.iceAccretion = line.replace(/^ICE ACCRETION\s+/, '');
       } else if (upperLine === 'NNNN') {
-        if (context.currentForecast && (context.currentForecast.wind.speed || context.currentForecast.timeRange.from || context.currentForecast.seas)) {
+        if (context.currentForecast && (context.currentForecast.wind.speed || context.currentForecast.wind.gusts || context.currentForecast.timeRange.from || context.currentForecast.seas)) {
           context.message.sections.part1.push(context.currentForecast);
           context.currentForecast = undefined;
         }
         context.state = State.INITIAL;
       } else if (upperLine.includes('PETER THE GREAT GULF') || upperLine.includes('REGION')) {
         if (context.currentForecast) {
-          const hasOtherData = context.currentForecast.wind.speed || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility;
+          const hasOtherData = context.currentForecast.wind.speed || context.currentForecast.wind.gusts || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility;
           if (!hasOtherData && context.currentForecast.timeRange.from && !context.currentForecast.region) {
             context.currentForecast.region = line;
           } else {
-            if (context.currentForecast.wind.speed || context.currentForecast.timeRange.from || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility) {
+              if (context.currentForecast.wind.speed || context.currentForecast.wind.gusts || context.currentForecast.timeRange.from || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility) {
               context.message.sections.part1.push(context.currentForecast);
             }
             context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' }, region: line };
           }
         } else {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' }, region: line };
         }
       }
       break;
 
     case State.PART_2:
       if (upperLine.includes('SYNOPSIS')) {
         context.state = State.SYNOPSIS;
         context.currentSynopsis = { time: line.replace(/^SYNOPSIS AT\s+/, ''), pressures: [] };
       } else if (upperLine.includes('ICE')) {
         context.state = State.ICE_REPORT;
         context.currentIceReport = { region: '', direction: '', coordinates: [] };
       } else if (upperLine.includes('FORECAST') || upperLine.includes('PART 3')) {
         context.state = State.PART_3;
         context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
       } else if (upperLine === 'NNNN') {
         context.state = State.INITIAL;
       } else {
         context.message.sections.part2 = context.message.sections.part2 || { synopsis: { time: '', pressures: [] } };
         context.message.sections.part2.synopsis!.pressures.push({
diff --git a/src/decoder.ts b/src/decoder.ts
index c5affa4072ba466120accae5d6ca68ceaab74006..815bfcaab7866f4aadfd2e33b858f06cb01cfb28 100644
--- a/src/decoder.ts
+++ b/src/decoder.ts
@@ -314,185 +328,187 @@ function processLine(line: string, context: FSMContext): void {
       } else if (upperLine.match(/^[A-Z0-9-]+$/)) {
         context.currentIceReport!.region = line;
       } else if (upperLine.includes('ICE N') || upperLine.includes('ICE S') || upperLine.includes('ICE E') || upperLine.includes('ICE SW')) {
         context.currentIceReport!.direction = line.match(/ICE\s+([A-Z\/]+)/i)![1];
         context.currentIceReport!.coordinates.push(line.replace(/ICE\s+[A-Z\/]+\s+TO\s+/, ''));
       } else if (upperLine.includes('WINDS')) {
         context.message.sections.part2 = context.message.sections.part2 || { synopsis: { time: '', pressures: [] }, iceReports: [] };
         context.message.sections.part2.iceReports!.push(context.currentIceReport!);
         context.currentIceReport = undefined;
         context.state = State.FORECAST;
         context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
       } else if (upperLine === 'NNNN') {
         context.state = State.INITIAL;
       }
       break;
 
     case State.PART_3:
       if (/^\d{5}(,\s*\d{5})*/.test(line)) {
         context.currentStationCodes = line.split(',').map(code => code.trim());
         if (context.currentForecast) {
           context.currentForecast.stationCodes = context.currentStationCodes;
         } else {
           context.currentForecast = { stationCodes: context.currentStationCodes, timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
       } else if (upperLine.includes('WINDS')) {
-        const windMatch = line.match(/WINDS\s+([A-Z\s\/]+?)(?:\s+(\d+\s*(?:TO\s*\d+)?\s*MS))?(?:\s+GUSTS\s*(\d+\s*(?:TO\s*\d+)?\s*MS))?/i);
+        const windMatch = line.match(/WINDS\s+((?:[A-Z]{1,2}\s+)*[A-Z]{1,2})(?=\s+(?:\d|GUSTS|$))(?:\s+(\d+\s*(?:TO\s*\d+)?\s*MS))?(?:\s+GUSTS\s*(\d+\s*(?:TO\s*\d+)?\s*MS))?/i);
         if (windMatch) {
           if (!context.currentForecast) {
             context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
           }
+          const speed = windMatch[2] || windMatch[3] || '';
           context.currentForecast.wind = {
             direction: windMatch[1].trim(),
-            speed: windMatch[2] || '',
+            speed,
             gusts: windMatch[3] || undefined,
           };
         }
       } else if (upperLine.includes('HEIGHT OF WAVES')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.seas = line.replace(/^HEIGHT OF WAVES\s+/, '');
       } else if (upperLine.includes('TEMP')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.temperature = line.replace(/^TEMPERATURE OF\s+(?:AIR\s+)?/, '');
       } else if (upperLine.includes('VIS')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.visibility = line.replace(/^VIS\s+/, '');
       } else if (upperLine.includes('ICE ACCRETION')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.iceAccretion = line.replace(/^ICE ACCRETION\s+/, '');
       } else if (upperLine === 'NNNN') {
-        if (context.currentForecast && (context.currentForecast.wind.speed || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility || context.currentForecast.timeRange.from)) {
+        if (context.currentForecast && (context.currentForecast.wind.speed || context.currentForecast.wind.gusts || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility || context.currentForecast.timeRange.from)) {
           if (context.message.sections.part3) {
             context.message.sections.part3.push(context.currentForecast);
           } else {
             context.message.sections.part1.push(context.currentForecast);
           }
           context.currentForecast = undefined;
           context.currentStationCodes = undefined;
         }
         context.state = State.INITIAL;
       } else if (upperLine.startsWith('FROM') || (upperLine.includes('SECOND HALF NIGHT') && !upperLine.includes('GUSTS'))) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         let from = line.trim();
         let to = '';
         if (upperLine.startsWith('FROM')) {
           const timeMatch = line.match(/^FROM\s+(.+?)\s+TO\s+(.+)/i);
           if (timeMatch) {
             from = timeMatch[1].trim();
             to = timeMatch[2].trim();
           }
         } else {
           from = line.trim();
         }
         context.currentForecast.timeRange = { from, to };
       } else if (/SECOND HALF NIGHT|FIRST HALF DAY/i.test(upperLine)) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.timeRange = { from: line.trim(), to: '' };
       } else if (upperLine.includes('PETER THE GREAT GULF') || upperLine.includes('REGION')) {
         if (context.currentForecast) {
-          const hasOtherData = context.currentForecast.wind.speed || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility;
+          const hasOtherData = context.currentForecast.wind.speed || context.currentForecast.wind.gusts || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility;
           if (!hasOtherData && context.currentForecast.timeRange.from && !context.currentForecast.region) {
             context.currentForecast.region = line;
           } else {
-            if (context.currentForecast.wind.speed || context.currentForecast.timeRange.from || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility) {
+              if (context.currentForecast.wind.speed || context.currentForecast.wind.gusts || context.currentForecast.timeRange.from || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility) {
               if (context.message.sections.part3) {
                 context.message.sections.part3.push(context.currentForecast);
               } else {
                 context.message.sections.part1.push(context.currentForecast);
               }
             }
             context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' }, region: line };
           }
         } else {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' }, region: line };
         }
       }
       break;
 
     case State.FORECAST:
-      if (upperLine.includes('WINDS')) {
-        const windMatch = line.match(/WINDS\s+([A-Z\s\/]+?)(?:\s+(\d+\s*(?:TO\s*\d+)?\s*MS))?(?:\s+GUSTS\s*(\d+\s*(?:TO\s*\d+)?\s*MS))?/i);
+        if (upperLine.includes('WINDS')) {
+        const windMatch = line.match(/WINDS\s+((?:[A-Z]{1,2}\s+)*[A-Z]{1,2})(?=\s+(?:\d|GUSTS|$))(?:\s+(\d+\s*(?:TO\s*\d+)?\s*MS))?(?:\s+GUSTS\s*(\d+\s*(?:TO\s*\d+)?\s*MS))?/i);
         if (windMatch) {
           if (!context.currentForecast) {
             context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
           }
+          const speed = windMatch[2] || windMatch[3] || '';
           context.currentForecast.wind = {
             direction: windMatch[1].trim(),
-            speed: windMatch[2] || '',
+            speed,
             gusts: windMatch[3] || undefined,
           };
         }
       } else if (upperLine.includes('TEMP')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.temperature = line.replace(/^TEMPERATURE OF\s+(?:AIR\s+)?/, '');
       } else if (upperLine.includes('VIS')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.visibility = line.replace(/^VIS\s+/, '');
       } else if (upperLine.includes('HEIGHT OF WAVES')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.seas = line.replace(/^HEIGHT OF WAVES\s+/, '');
       } else if (upperLine.includes('ICE ACCRETION')) {
         if (!context.currentForecast) {
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
         context.currentForecast.iceAccretion = line.replace(/^ICE ACCRETION\s+/, '');
       } else if (/^\d{5}(,\s*\d{5})*/.test(line) || upperLine === 'NNNN') {
-        if (context.currentForecast && (context.currentForecast.wind.speed || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility || context.currentForecast.timeRange.from)) {
+        if (context.currentForecast && (context.currentForecast.wind.speed || context.currentForecast.wind.gusts || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility || context.currentForecast.timeRange.from)) {
           if (context.message.sections.part3) {
             context.message.sections.part3.push(context.currentForecast);
           } else {
             context.message.sections.part1.push(context.currentForecast);
           }
           context.currentForecast = undefined;
           context.currentStationCodes = undefined;
         }
         if (upperLine === 'NNNN') {
           context.state = State.INITIAL;
         } else {
           context.currentStationCodes = line.split(',').map(code => code.trim());
           context.currentForecast = { stationCodes: context.currentStationCodes, timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         }
       } else if (upperLine.includes('PETER THE GREAT GULF') || upperLine.includes('REGION')) {
-        if (context.currentForecast && (context.currentForecast.wind.speed || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility || context.currentForecast.timeRange.from)) {
+        if (context.currentForecast && (context.currentForecast.wind.speed || context.currentForecast.wind.gusts || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility || context.currentForecast.timeRange.from)) {
           if (context.message.sections.part3) {
             context.message.sections.part3.push(context.currentForecast);
           } else {
             context.message.sections.part1.push(context.currentForecast);
           }
         }
         context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' }, region: line };
       }
       break;
 
     case State.END:
       if (upperLine.startsWith('ZCZC')) {
         context.state = State.HEADER;
         context.message.sections.header = [line];
       }
       break;
   }
 }
 
 // Декодирование КН-01
 function decodeKN01(lines: string[], context: FSMContext): WeatherMessage {
   const groups = lines[0].split(/\s+/);
   context.message.sections.header = [
     `${i18n.__('station')}: ${stations[groups[0]] || i18n.__('unknown_station', { code: groups[0] })}`
   ];
 
EOF
)