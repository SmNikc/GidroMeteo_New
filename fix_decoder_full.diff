diff --git a/src/decoder.ts b/src/decoder.ts
index 5c04081..12345678 100644
--- a/src/decoder.ts
+++ b/src/decoder.ts
@@ -35,7 +35,7 @@ interface WeatherMessage {
   type: 'KN01' | 'SafetyNet' | 'NAVTEX';
   date: string;
   source: string;
-  sections: {
+  sections?: {
     header: string[];
     part1: Forecast[];
     part2?: { synopsis?: Synopsis; iceReports?: IceReport[] };
@@ -80,6 +80,7 @@ function decodeMessage(input: string): WeatherMessage[] {
     message: {
       type: 'SafetyNet',
       date: '',
+      sections: { header: [], part1: [], part3: [] },
       source: '',
     },
   };
@@ -92,6 +93,24 @@ function decodeMessage(input: string): WeatherMessage[] {
         messages.push(context.message);
       }
       context = {
         state: State.HEADER,
         message: {
           type: 'SafetyNet',
           date: '',
           sections: { header: [line], part1: [], part3: [] },
           source: '',
         },
       };
       continue;
     } else if (/^\d{5}\s+\d{6}\s*/i.test(upperLine)) {
       // КН-01 starts with station code and time
       if (context.message.sections?.header.length || context.message.sections?.part1.length || context.message.sections?.part3.length) {
         messages.push(context.message);
       }
       context = {
         state: State.HEADER,
         message: {
           type: 'KN01',
           date: '',
           sections: { header: [line], part1: [], part3: [] },
           source: '',
         },
       };
       continue;
     } else if (upperLine.match(/ZCZC\s+[A-Z]{2}\d{2}/)) {
       // NAVTEX starts with ZCZC followed by identifier like FA81
       if (context.message.sections?.header.length || context.message.sections?.part1.length || context.message.sections?.part3.length) {
         messages.push(context.message);
       }
       context = {
         state: State.HEADER,
         message: {
           type: 'NAVTEX',
           date: '',
           sections: { header: [line], part1: [], part3: [] },
           source: '',
         },
       };
       continue;
     }
     processLine(line, context);
   }
@@ -102,6 +121,7 @@ function decodeMessage(input: string): WeatherMessage[] {
   lastInput = input;
   cachedMessages = [...messages];
   return messages;
 }
 
+// Helper functions for KN-01 WMO groups
+function decodeWMOGroup(group: string): { direction: string; speed: string } {
+  const dd = group.substring(1, 3);
+  const ff = parseInt(group.substring(3));
+  const directionDesc = {
+    "00": "штиль",
+    "01": "ССВ",
+    "05": "ВСВ",
+    "10": "В",
+    "14": "ЮВ",
+    "18": "Ю",
+    "22": "ЮЗ",
+    "26": "З",
+    "29": "ЗСЗ",
+    "32": "СЗ",
+    "36": "С"
+  }[dd] || dd;
+  return { direction: directionDesc, speed: `${ff} м/с` };
+}
+
+function decodeTemperatureGroup(group: string): string {
+  const sn = group[1] === "1" ? "минус" : "+";
+  const temp = parseInt(group.substring(2)) / 10;
+  return `${sn}${temp} градусов`;
+}
+
+function decodeVisibilityGroup(group: string): string {
+  const vv = group[4] + group[5];
+  const visibilityDesc = {
+    "00": "менее 0.1 км",
+    "10": "1 км",
+    "50": "50 км",
+    "89": "70 км и более"
+  }[vv] || `${parseInt(vv)} км`;
+  return visibilityDesc;
+}
+
+function decodePressureGroup(group: string): string {
+  const pressure = parseInt(group.substring(1)) / 10 + 1000;
+  return `${pressure} гПа`;
+}
+
+function decodePrecipitationGroup(group: string): string {
+  const rrr = parseInt(group.substring(1, 4));
+  const amount = rrr >= 990 ? (rrr - 990) / 10 : rrr;
+  return `${amount} мм`;
+}
+
 // Обработка строки конечным автоматом
 function processLine(line: string, context: FSMContext): void {
   const upperLine = line.toUpperCase();
 
   switch (context.state) {
     case State.INITIAL:
       break;
 
     case State.HEADER:
       if (context.message.type === 'SafetyNet') {
         if (upperLine.includes('GALE WARNING') || upperLine.includes('STORM WARNING') || upperLine.includes('CYCLONE WARNING')) {
           context.state = State.PART_1;
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: i18n.__('gale_warning'), speed: '' } };
         } else if (upperLine.includes('SYNOPSIS') || upperLine.includes('WEATHER SUMMARY')) {
           context.state = State.SYNOPSIS;
           context.message.sections!.part2 = { synopsis: { time: line.replace(/^SYNOPSIS AT\s+/, ''), pressures: [] } };
         } else if (upperLine.includes('FORECAST') && context.message.sections!.part1.length === 0) {
           context.state = State.PART_3;
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         } else if (upperLine.includes('WINDS') || upperLine.includes('SECOND HALF NIGHT')) {
           context.state = State.PART_1;
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
           if (upperLine.includes('WINDS')) {
             const windMatch = line.match(/WINDS\s+((?:[A-Z]{1,2}\s+)*[A-Z]{1,2})(?=\s+(?:\d|GUSTS|$))(?:\s+(\d+\s*(?:TO\s*\d+)?\s*MS))?(?:\s+GUSTS\s*(\d+\s*(?:TO\s*\d+)?\s*MS))?/i);
             if (windMatch) {
               const speed = windMatch[2] || windMatch[3] || '';
               context.currentForecast.wind = {
                 direction: windMatch[1].trim(),
                 speed,
                 gusts: windMatch[3] || undefined,
               };
             }
           } else {
             context.currentForecast.timeRange = { from: line.trim(), to: '' };
           }
         } else if (upperLine.includes('NAVAREA') || upperLine.includes('METAREA')) {
           context.message.sections!.header.push(line);
         } else if (upperLine.includes('PIRACY WARNING') || upperLine.includes('SAR ALERT')) {
           context.state = State.PART_1;
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
           context.message.sections!.header.push(line);
         } else if (upperLine === 'NNNN') {
           context.state = State.INITIAL;
         } else if (/^\d{6}\s+UTC\s+[A-Z]{3}\s+\d{2}$/.test(upperLine)) {
           context.message.date = line;
           context.message.sections!.header.push(line);
         } else {
           context.message.sections!.header.push(line);
           if (upperLine.includes('ISSUED BY')) {
             context.message.source = line.replace(/^ISSUED\s+BY\s*/i, '');
           }
         }
       } else if (context.message.type === 'KN01') {
         if (/^\d{5}\s+\d{6}\s*/i.test(upperLine)) {
           context.message.date = line;
           context.message.sections!.header.push(line);
           context.currentForecast = {
             stationCodes: [line.split(/\s+/)[0]],
             timeRange: { from: '', to: '' },
             wind: { direction: '', speed: '' },
           };
           context.state = State.PART_1;
         } else {
           context.message.sections!.header.push(line);
         }
       } else if (context.message.type === 'NAVTEX') {
         if (upperLine.includes('GALE') || upperLine.includes('STORM') || upperLine.includes('CYCLONE')) {
           context.state = State.PART_1;
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
           const windMatch = line.match(/(?:GALE|STORM|CYCLONE)\s+.*?WIND\s+([A-Z\s\/]+)\s+(\d+\s*(?:TO\s*\d+)?\s*KT)/i);
           if (windMatch) {
             context.currentForecast.wind = {
               direction: windMatch[1].trim(),
               speed: windMatch[2].trim(),
               gusts: undefined,
             };
           }
         } else if (/^\d{6}\s+UTC/.test(upperLine)) {
           context.message.date = line;
           context.message.sections!.header.push(line);
         } else if (upperLine.includes('NAVAREA') || upperLine.includes('METAREA')) {
           context.message.sections!.header.push(line);
         } else {
           context.message.sections!.header.push(line);
           if (upperLine.includes('ISSUED')) {
             context.message.source = line.replace(/^ISSUED\s+BY\s*/i, '');
           }
         }
       }
       break;
 
     case State.PART_1:
       if (context.message.type === 'SafetyNet') {
         if (upperLine.includes('SYNOPSIS') || upperLine.includes('PART 2')) {
           if (context.currentForecast && (context.currentForecast.wind.speed || context.currentForecast.wind.gusts || context.currentForecast.timeRange.from || context.currentForecast.seas)) {
             context.message.sections!.part1.push(context.currentForecast);
             context.currentForecast = undefined;
           }
           context.state = State.SYNOPSIS;
           context.message.sections!.part2 = { synopsis: { time: line.replace(/^SYNOPSIS AT\s+/, ''), pressures: [] } };
         } else if (upperLine.includes('GALE WARNING') || upperLine.includes('STORM WARNING') || upperLine.includes('CYCLONE WARNING')) {
           if (context.currentForecast && (context.currentForecast.wind.speed || context.currentForecast.wind.gusts || context.currentForecast.timeRange.from || context.currentForecast.seas)) {
             context.message.sections!.part1.push(context.currentForecast);
           }
           context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: i18n.__('gale_warning'), speed: '' } };
         } else if (/^\d{5}(,\s*\d{5})*/.test(line)) {
           context.currentStationCodes = line.split(',').map(code => code.trim());
           if (context.currentForecast) {
             context.currentForecast.stationCodes = context.currentStationCodes;
           } else {
             context.currentForecast = { stationCodes: context.currentStationCodes, timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
           }
         } else if (upperLine.startsWith('FROM') || (upperLine.includes('SECOND HALF NIGHT') && !upperLine.includes('GUSTS'))) {
           if (!context.currentForecast) {
             context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
           }
           let from = line.trim();
           let to = '';
           if (upperLine.startsWith('FROM')) {
             const timeMatch = line.match(/^FROM\s+(.+?)\s+TO\s+(.+)/i);
             if (timeMatch) {
               from = timeMatch[1].trim();
               to = timeMatch[2].trim();
             }
           } else {
             from = line.trim();
           }
           context.currentForecast.timeRange = { from: i18n.__(from.toLowerCase()), to: to ? i18n.__(to.toLowerCase()) : '' };
         } else if (/SECOND HALF NIGHT|FIRST HALF DAY/i.test(upperLine)) {
           if (!context.currentForecast) {
             context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
           }
           context.currentForecast.timeRange = { from: i18n.__(line.trim().toLowerCase()), to: '' };
         } else if (upperLine.includes('WINDS')) {
           if (!context.currentForecast) {
             context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
           }
           const windMatch = line.match(/WINDS\s+((?:[A-Z]{1,2}\s+)*[A-Z]{1,2})(?=\s+(?:\d|GUSTS|$))(?:\s+(\d+\s*(?:TO\s*\d+)?\s*MS))?(?:\s+GUSTS\s*(\d+\s*(?:TO\s*\d+)?\s*MS))?/i);
           if (windMatch) {
             const speed = windMatch[2] || windMatch[3] || '';
             context.currentForecast.wind = {
               direction: windMatch[1].trim(),
               speed,
               gusts: windMatch[3] || undefined,
             };
           }
         } else if (upperLine.includes('HEIGHT OF WAVES')) {
           if (!context.currentForecast) {
             context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
           }
           context.currentForecast.seas = line.replace(/^HEIGHT OF WAVES\s+/, '');
         } else if (upperLine.includes('TEMP')) {
           if (!context.currentForecast) {
             context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
           }
           context.currentForecast.temperature = line.replace(/^TEMPERATURE OF\s+(?:AIR\s+)?/, '');
         } else if (upperLine.includes('VIS')) {
           if (!context.currentForecast) {
             context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
           }
           context.currentForecast.visibility = line.replace(/^VIS\s+/, '');
         } else if (upperLine.includes('ICE ACCRETION')) {
           if (!context.currentForecast) {
             context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
           }
           context.currentForecast.iceAccretion = line.replace(/^ICE ACCRETION\s+/, '');
         } else if (upperLine === 'NNNN') {
           if (context.currentForecast && (context.currentForecast.wind.speed || context.currentForecast.wind.gusts || context.currentForecast.timeRange.from || context.currentForecast.seas)) {
             context.message.sections!.part1.push(context.currentForecast);
             context.currentForecast = undefined;
           }
           context.state = State.INITIAL;
         } else if (upperLine.includes('PETER THE GREAT GULF') || upperLine.includes('REGION')) {
           if (context.currentForecast) {
             const hasOtherData = context.currentForecast.wind.speed || context.currentForecast.wind.gusts || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility;
             if (!hasOtherData && context.currentForecast.timeRange.from && !context.currentForecast.region) {
               context.currentForecast.region = line;
             } else {
               if (context.currentForecast.wind.speed || context.currentForecast.wind.gusts || context.currentForecast.timeRange.from || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility) {
                 context.message.sections!.part1.push(context.currentForecast);
               }
               context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' }, region: line };
             }
           } else {
             context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' }, region: line };
           }
         } else if (upperLine.match(/\d{2,4}[NS]\s+\d{3,5}[EW]/i)) {
           if (!context.currentForecast) {
             context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
           }
           context.currentForecast.region = line;
         }
       } else if (context.message.type === 'KN01') {
         if (upperLine.match(/^\d{5}$/)) {
           if (context.currentForecast && (context.currentForecast.wind.speed || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility)) {
             context.message.sections!.part1.push(context.currentForecast);
             context.currentForecast = undefined;
           }
           context.currentForecast = { stationCodes: [line], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
         } else if (upperLine.includes('WIND')) {
           if (!context.currentForecast) {
             context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
           }
           const windMatch = line.match(/WIND\s+([A-Z]{1,2})\s+(\d+\s*(?:TO\s*\d+)?\s*MS)/i);
           if (windMatch) {
             context.currentForecast.wind = {
               direction: windMatch[1].trim(),
               speed: windMatch[2].trim(),
               gusts: undefined,
             };
           }
         } else if (upperLine.includes('WAVES')) {
           if (!context.currentForecast) {
             context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
           }
           const wavesMatch = line.match(/WAVES\s+(\d+(?:,\d+)?)\s*TO\s*(\d+(?:,\d+)?)\s*M/i);
           if (wavesMatch) {
             context.currentForecast.seas = `${wavesMatch[1]} TO ${wavesMatch[2]} M`;
           }
         } else if (upperLine.includes('TEMP')) {
           if (!context.currentForecast) {
             context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
           }
           context.currentForecast.temperature = decodeTemperatureGroup(line.replace(/^TEMPERATURE\s+/, ''));
         } else if (upperLine.includes('VIS')) {
           if (!context.currentForecast) {
             context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
           }
           context.currentForecast.visibility = decodeVisibilityGroup(line.replace(/^VIS\s+/, ''));
         } else if (upperLine.includes('333') || upperLine.includes('555')) {
           if (context.currentForecast && (context.currentForecast.wind.speed || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility)) {
             context.message.sections!.part1.push(context.currentForecast);
             context.currentForecast = undefined;
           }
           context.state = upperLine.includes('333') ? State.PART_3 : State.PART_1;
         } else if (upperLine.match(/^\d{5}$/) && context.state === State.PART_3) {
           const group = line;
           switch (group[0]) {
             case '1':
               if (group.startsWith('11')) {
                 context.currentForecast!.temperature = decodeTemperatureGroup(group);
               } else if (group.startsWith('12')) {
                 // Dew point
               } else {
                 context.currentForecast!.visibility = decodeVisibilityGroup(group);
               }
               break;
             case '2':
               const wind = decodeWMOGroup(group);
               context.currentForecast!.wind = {
                 direction: wind.direction,
                 speed: wind.speed,
                 gusts: undefined,
               };
               break;
             case '3':
               // Pressure
               break;
             case '6':
               // Precipitation
               break;
           }
         } else if (upperLine === 'NNNN') {
           if (context.currentForecast && (context.currentForecast.wind.speed || context.currentForecast.seas || context.currentForecast.temperature || context.currentForecast.visibility)) {
             context.message.sections!.part1.push(context.currentForecast);
             context.currentForecast = undefined;
           }
           context.state = State.INITIAL;
         }
       } else if (context.message.type === 'NAVTEX') {
         if (upperLine.includes('WIND')) {
           if (!context.currentForecast) {
             context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
           }
           const windMatch = line.match(/WIND\s+([A-Z\s\/]+)\s+(\d+\s*(?:TO\s*\d+)?\s*KT)/i);
           if (windMatch) {
             context.currentForecast.wind = {
               direction: windMatch[1].trim(),
               speed: windMatch[2].trim(),
               gusts: undefined,
             };
           }
         } else if (upperLine.includes('HEIGHT OF WAVES')) {
           if (!context.currentForecast) {
             context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
           }
           context.currentForecast.seas = line.replace(/^HEIGHT OF WAVES\s+/, '');
         } else if (upperLine.includes('COORDINATES') || upperLine.match(/\d{2,4}[NS]\s+\d{3,5}[EW]/i)) {
           if (!context.currentForecast) {
             context.currentForecast = { stationCodes: [], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
           }
           context.currentForecast.region = line;
         } else if (upperLine === 'NNNN') {
           if (context.currentForecast && (context.currentForecast.wind.speed || context.currentForecast.seas || context.currentForecast.region)) {
             context.message.sections!.part1.push(context.currentForecast);
             context.currentForecast = undefined;
           }
           context.state = State.INITIAL;
         }
       }
       break;
@@ -514,7 +614,7 @@ function formatMessage(messages: WeatherMessage[]): string {
         if (forecast.timeRange.from) {
           const to = forecast.timeRange.to ? ` по ${forecast.timeRange.to}` : '';
-          appendLine(`${i18n.__('time_range', { from: forecast.timeRange.from.replace(/\//g, '/'), to })}`, 1);
+          appendLine(`${i18n.__('time_range', { from: forecast.timeRange.from, to })}`, 1);
         }
         if (forecast.wind.direction || forecast.wind.speed || forecast.wind.gusts) {
           appendLine(`${i18n.__('wind')}: ${forecast.wind.direction} ${forecast.wind.speed}${forecast.wind.gusts ? ` ${i18n.__('gusts')} ${forecast.wind.gusts}` : ''} ${i18n.__('ms')}`, 1);
@@ -555,7 +655,7 @@ function formatMessage(messages: WeatherMessage[]): string {
         if (forecast.timeRange.from) {
           const to = forecast.timeRange.to ? ` по ${forecast.timeRange.to}` : '';
-          appendLine(`${i18n.__('time_range', { from: forecast.timeRange.from.replace(/\//g, '/'), to })}`, 1);
+          appendLine(`${i18n.__('time_range', { from: forecast.timeRange.from, to })}`, 1);
         }
         if (forecast.wind.direction || forecast.wind.speed || forecast.wind.gusts) {
           appendLine(`${i18n.__('wind')}: ${forecast.wind.direction} ${forecast.wind.speed}${forecast.wind.gusts ? ` ${i18n.__('gusts')} ${forecast.wind.gusts}` : ''} ${i18n.__('ms')}`, 1);
@@ -572,12 +581,36 @@ function formatMessage(messages: WeatherMessage[]): string {
   return output;
 }
 
 // Декодирование КН-01
 function decodeKN01(lines: string[], context: FSMContext): WeatherMessage {
-  const groups = lines[0].split(/\s+/);
-  context.message.sections.header = [
-    `${i18n.__('station')}: ${stations[groups[0]] || i18n.__('unknown_station', { code: groups[0] })}`
+  context.message.type = 'KN01';
+  let currentForecast: Forecast | undefined = undefined;
+  for (const line of lines) {
+    const upperLine = line.toUpperCase();
+    if (/^\d{5}\s+\d{6}\s*/i.test(upperLine)) {
+      context.message.date = line;
+      context.message.sections!.header.push(line);
+      currentForecast = {
+        stationCodes: [line.split(/\s+/)[0]],
+        timeRange: { from: '', to: '' },
+        wind: { direction: '', speed: '' },
+      };
+    } else if (upperLine.match(/^\d{5}$/)) {
+      if (currentForecast && (currentForecast.wind.speed || currentForecast.seas || currentForecast.temperature || currentForecast.visibility)) {
+        context.message.sections!.part1.push(currentForecast);
+      }
+      currentForecast = { stationCodes: [line], timeRange: { from: '', to: '' }, wind: { direction: '', speed: '' } };
+      context.message.sections!.header.push(`${i18n.__('station')}: ${stations[line] || i18n.__('unknown_station', { code: line })}`);
+    } else if (upperLine.includes('333') || upperLine.includes('555')) {
+      if (currentForecast && (currentForecast.wind.speed || currentForecast.seas || currentForecast.temperature || currentForecast.visibility)) {
+        context.message.sections!.part1.push(currentForecast);
+        currentForecast = undefined;
+      }
+    }
   ];
-  return context.message;
+  if (currentForecast && (currentForecast.wind.speed || currentForecast.seas || currentForecast.temperature || currentForecast.visibility)) {
+    context.message.sections!.part1.push(currentForecast);
+  }
+  return context.message;
 }
 
 export { decodeMessage, formatMessage };